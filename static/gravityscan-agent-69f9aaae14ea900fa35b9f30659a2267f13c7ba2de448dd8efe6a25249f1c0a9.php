<?php

define('GRAVITYSCAN_AGENT_FILE', __FILE__);
define('GRAVITYSCAN_AGENT_IS_WRITABLE', is_writable(__FILE__));

function gsIncludeFile($file, $once = false)
{
    static $includeList = array();
    if ($once && isset($includeList[$file])) {
        return null;
    }
    $includeList[$file] = true;
    $contents = gsGetFileContents($file);
    if ($contents === false) {
        return false;
    }
    return eval('?>' . $contents);
}

function gsRequireFile($file, $once = true)
{
    static $includeList = array();
    if ($once && isset($includeList[$file])) {
        return null;
    }
    $includeList[$file] = true;
    $contents = gsGetFileContents($file);
    if ($contents === false) {
        throw new Exception('gsRequireFile: Failed to include ' . $file);
    }
    return eval('?>' . $contents);
}

function gsGetFileContents($path)
{
    global $agentFiles;
    if (array_key_exists($path, $agentFiles)) {
        return $agentFiles[$path];
    }
    return false;
}

$agentFiles = unserialize(base64_decode(''));

gsRequireFile('init.php');
gsRequireFile('http.php');

